import { Loader } from 'components';
import { useRequest } from 'hooks';
import React, { useEffect, useMemo } from 'react';
import {
  getFacetNamesByComponent,
  getLabelValues,
  getLogFacetValuesCounts,
} from 'requests';
import { FacetName } from 'types';

import { HIDE_AUTOGENERATED_PREFIXS } from './constants';
import { useLogsState, useQueryScheduler } from './hooks';
import LogsFacetGroupFacet from './LogsFacetGroupFacet';

type Props = {
  component: string;
  hardcodedFacets?: FacetName[];
  hideAutogeneratedFacets?: boolean;
  logsState: ReturnType<typeof useLogsState>;
  queryScheduler: ReturnType<typeof useQueryScheduler>;
};

const LogsFacetGroupExpanded = ({
  component,
  hardcodedFacets,
  hideAutogeneratedFacets,
  logsState,
  queryScheduler,
}: Props) => {
  const getFacetNamesByComponentRequest = useRequest(getFacetNamesByComponent);
  const {
    date,
    filterByFacets,
    filterOrExcludeByFingerprint,
    keyExists,
    searchTerms,
    selectedFacetValues,
  } = logsState;

  useEffect(() => {
    if (!hardcodedFacets) {
      if (queryScheduler.secondQueryCompletedAt) {
        getFacetNamesByComponentRequest.call({
          component,
          date,
          filterByFacets,
          filterOrExcludeByFingerprint,
          keyExists,
          searchTerms,
          selectedFacetValues,
        });
      }
    }
  }, [queryScheduler.secondQueryCompletedAt]);

  const facets = useMemo(() => {
    if (hardcodedFacets) {
      return hardcodedFacets;
    }
    if (hideAutogeneratedFacets) {
      return (
        getFacetNamesByComponentRequest.result?.filter(
          (facet) =>
            !HIDE_AUTOGENERATED_PREFIXS.some((prefix) =>
              facet.name.startsWith(prefix),
            ),
        ) || []
      );
    }

    return getFacetNamesByComponentRequest.result || [];
  }, [
    component,
    hardcodedFacets,
    hideAutogeneratedFacets,
    getFacetNamesByComponentRequest.result,
  ]);
  return (
    <div className="logs__facet-group__facets">
      <Loader
        className="logs__facet-group__facets__loader"
        isLoading={getFacetNamesByComponentRequest.isLoading}
      >
        {facets.length ? (
          facets
            .sort((a, b) => a.name.localeCompare(b.name))
            .map((facet) => (
              <LogsFacetGroupFacet
                facet={facet}
                key={facet.component + facet.name}
                logsState={logsState}
                request={
                  hardcodedFacets ? getLabelValues : getLogFacetValuesCounts
                }
                queryScheduler={queryScheduler}
              />
            ))
        ) : (
          <div className="logs__facet-group__facets__placeholder">{`No facets for ${component}`}</div>
        )}
      </Loader>
    </div>
  );
};

export default LogsFacetGroupExpanded;
