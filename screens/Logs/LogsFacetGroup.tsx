import { FlyoutCaret, TooltipTrigger } from 'components';
import { useToggle } from 'hooks';
import React, { ReactElement } from 'react';
import { FacetName } from 'types';
import { BsFillEyeFill, BsFillEyeSlashFill } from 'react-icons/bs';

import { useLogsState, useQueryScheduler } from './hooks';
import LogsFacetGroupExpanded from './LogsFacetGroupExpanded';

type Props = {
  component: string;
  hardcodedFacets?: FacetName[];
  keepOpen?: boolean;
  logsState: ReturnType<typeof useLogsState>;
  queryScheduler: ReturnType<typeof useQueryScheduler>;
};

const LogsFacetGroup = ({
  component,
  hardcodedFacets,
  keepOpen,
  logsState,
  queryScheduler,
}: Props): ReactElement => {
  const expandedToggle = useToggle();
  const toogleHideAutogeneratedFacets = useToggle(true);
  const expanded = expandedToggle.value;
  const hideAutogeneratedFacets = toogleHideAutogeneratedFacets.value;

  return (
    <div className="logs__facet-group">
      {!keepOpen ? (
        <button
          className="logs__facet-group__button"
          onClick={expandedToggle.toggle}
        >
          <FlyoutCaret
            className="logs__facet-group__button__flyout-caret"
            isOpen={expanded}
          />
          {component}
          {!hardcodedFacets && (
            <span
              className="logs__facet-group__button__hide-autogenerated"
              onClick={(e) => {
                e.stopPropagation();
                toogleHideAutogeneratedFacets.toggle();
              }}
            >
              <TooltipTrigger
                tooltip={
                  hideAutogeneratedFacets
                    ? 'Show autogenerated'
                    : 'Hide autogenerated'
                }
              >
                {hideAutogeneratedFacets ? (
                  <BsFillEyeFill />
                ) : (
                  <BsFillEyeSlashFill />
                )}
              </TooltipTrigger>
            </span>
          )}
        </button>
      ) : null}
      {expanded || keepOpen ? (
        <LogsFacetGroupExpanded
          component={component}
          hardcodedFacets={hardcodedFacets}
          hideAutogeneratedFacets={hideAutogeneratedFacets}
          logsState={logsState}
          queryScheduler={queryScheduler}
        />
      ) : null}
    </div>
  );
};

export default LogsFacetGroup;
